cmake_minimum_required(VERSION 3.12...3.26)

project(ultimaille-examples LANGUAGES C CXX)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_executable(hello hello.cpp)
add_executable(vertex_distances vertex_distances.cpp)
add_executable(hard_edges hard_edges.cpp)
add_executable(split_mesh split_mesh.cpp)
# add_executable(naive_subdivision naive_subdivision.cpp)
add_executable(quad_subdivision quad_subdivision.cpp)
add_executable(open_save_mesh open_save_mesh.cpp)
add_executable(iterate_primitives iterate_primitives.cpp)
add_executable(iterate_primitives_conn iterate_primitives_conn.cpp)
add_executable(move_around_mesh move_around_mesh.cpp)
add_executable(random_walk_faces random_walk_faces.cpp)
add_executable(create_fill_attributes create_fill_attributes.cpp)
add_executable(create_tri_mesh create_tri_mesh.cpp)
add_executable(edit_mesh edit_mesh.cpp)
add_executable(algebra algebra.cpp)
add_executable(create_volume_mesh create_volume_mesh.cpp)
add_executable(create_polyline create_polyline.cpp)
add_executable(primitive_geometry primitive_geometry.cpp)

target_link_libraries(hello  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(vertex_distances  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(hard_edges  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(split_mesh  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
# target_link_libraries(naive_subdivision  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(quad_subdivision  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(open_save_mesh  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(iterate_primitives  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(iterate_primitives_conn  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(move_around_mesh  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(random_walk_faces  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(create_fill_attributes  ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(create_tri_mesh ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(edit_mesh ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(algebra ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(create_volume_mesh ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(create_polyline ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)
target_link_libraries(primitive_geometry ${CMAKE_DL_LIBS} ultimaille $<$<BOOL:${OpenMP_CXX_FOUND}>:OpenMP::OpenMP_CXX>)

IF (NOT WIN32)
	target_link_libraries(hello m)
    target_link_libraries(vertex_distances m)
    target_link_libraries(hard_edges m)
    target_link_libraries(split_mesh m)
    target_link_libraries(open_save_mesh m)
    target_link_libraries(iterate_primitives m)
    target_link_libraries(iterate_primitives_conn m)
    target_link_libraries(move_around_mesh m)
    target_link_libraries(random_walk_faces m)
    target_link_libraries(create_fill_attributes m)
    target_link_libraries(create_tri_mesh m)
    target_link_libraries(edit_mesh m)
    target_link_libraries(algebra m)
    target_link_libraries(create_volume_mesh m)
    target_link_libraries(quad_subdivision m)
    target_link_libraries(create_polyline m)
    target_link_libraries(primitive_geometry m)
ENDIF()

set(OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/output")

file(MAKE_DIRECTORY "${OUTPUT_DIR}")
add_definitions(-DASSETS_INPUT_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/assets/\")
add_definitions(-DOUTPUT_DIR=\"${OUTPUT_DIR}/\")

# Copy asset files to build directory
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/assets DESTINATION ${CMAKE_CURRENT_BINARY_DIR})